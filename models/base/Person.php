<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\models\base;

use Yii;

/**
 * This is the base-model class for table "persons".
 *
 * @property integer $id
 * @property integer $contest_id
 * @property string $name
 * @property string $address1
 * @property string $address2
 * @property string $address3
 * @property string $postcode
 * @property string $role
 * @property string $telephone
 *
 * @property \app\models\Contest $contest
 * @property \app\models\Pilot[] $pilots
 * @property string $aliasModel
 */
abstract class Person extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const ROLE_PILOT = 'Pilot';
    const ROLE_COPILOT = 'CoPilot';
    const ROLE_VOLUNTEER = 'Volunteer';
    const ROLE_VISITOR = 'Visitor';
    const ROLE_OFFICIAL = 'Official';
    const ROLE_NONE = 'None';
    var $enum_labels = false;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'persons';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['contest_id', 'name'], 'required'],
            [['contest_id'], 'integer'],
            [['role', 'telephone'], 'string'],
            [['name', 'address1', 'address2', 'address3'], 'string', 'max' => 80],
            [['postcode'], 'string', 'max' => 12],
            [['contest_id'], 'exist', 'skipOnError' => true, 'targetClass' => \app\models\Contest::class, 'targetAttribute' => ['contest_id' => 'id']],
            ['role', 'in', 'range' => [
                    self::ROLE_PILOT,
                    self::ROLE_COPILOT,
                    self::ROLE_VOLUNTEER,
                    self::ROLE_VISITOR,
                    self::ROLE_OFFICIAL,
                    self::ROLE_NONE,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'contest_id' => 'Contest Name',
            'name' => 'Name',
            'address1' => 'Address Line 1',
            'address2' => 'Address Line 2',
            'address3' => 'Address Line 3',
            'postcode' => 'Postcode',
            'role' => 'Contest Role',
            'telephone' => 'Mobile Number',
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'id' => 'ID',
            'contest_id' => 'Contest Name',
            'name' => 'Name',
            'address1' => 'Address Line 1',
            'address2' => 'Address Line 2',
            'address3' => 'Address Line 3',
            'postcode' => 'Postcode',
            'role' => 'Contest Role',
            'telephone' => 'Mobile Number',
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getContest()
    {
        return $this->hasOne(\app\models\Contest::class, ['id' => 'contest_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPilots()
    {
        return $this->hasMany(\app\models\Pilot::class, ['person_id' => 'id']);
    }


    
    /**
     * @inheritdoc
     * @return \app\models\query\PersonQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \app\models\query\PersonQuery(get_called_class());
    }


    /**
     * get column role enum value label
     * @param string $value
     * @return string
     */
    public static function getRoleValueLabel($value){
        $labels = self::optsRole();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column role ENUM value labels
     * @return array
     */
    public static function optsRole()
    {
        return [
            self::ROLE_PILOT => 'Pilot',
            self::ROLE_COPILOT => 'Co Pilot',
            self::ROLE_VOLUNTEER => 'Volunteer',
            self::ROLE_VISITOR => 'Visitor',
            self::ROLE_OFFICIAL => 'Official',
            self::ROLE_NONE => 'None',
        ];
    }

}
